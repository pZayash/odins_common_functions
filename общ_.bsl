Функция КорневойТипКонфигурации_Получить(Знач пОбъект) Экспорт

    Если ТипЗнч(пОбъект) = Тип("ОбъектМетаданных") Тогда 
        МетаданныеТипа = пОбъект;
    Иначе
        Если ТипЗнч(пОбъект) = Тип("ОписаниеТипов") Тогда
            Если пОбъект.Типы().Количество() > 0 Тогда 
                пОбъект = пОбъект.Типы()[0];
            Иначе
                Возврат Неопределено;
            КонецЕсли;
        КонецЕсли;
        Если ТипЗнч(пОбъект) = Тип("Тип") Тогда
            МетаданныеТипа = Метаданные.НайтиПоТипу(пОбъект);
        Иначе
            МетаданныеТипа = Метаданные.НайтиПоТипу(ТипЗнч(пОбъект));
        КонецЕсли;
    КонецЕсли;
    Если МетаданныеТипа <> Неопределено Тогда 
        МассивФрагментов = СтрРазделить(МетаданныеТипа.ПолноеИмя(),".");
        Если МассивФрагментов.Количество() = 2 Тогда 
            Возврат МассивФрагментов[0];
        Иначе
            // Ссылка на субобъект
        КонецЕсли;
    КонецЕсли;
    Возврат Неопределено;
    
КонецФункции // ЛксПолучитьКорневойТипКонфигурации()

// Проверяет, является ли строка именем корневого типа объекта БД.
//
// Параметры:
//  пИмяКорневогоТипа - Строка, Неопределено - имя корневого типа.
//
// Возвращаемое значение:
//  Истина       – тип является корневым типом объекта БД;
//  Ложь         – иначе.
//
// 20140121 Заяш 
// Автор TormozIT
// Взято из подсистемы "ИнструментыРазработчика"
// ирГлобальный.ЛксЛиКорневойТипОбъектаБД
//
Функция КорневойТипКонфигурации_Проверить(КорневойТип) Экспорт

	Если Ложь
		ИЛИ КорневойТип = "БизнесПроцесс" 
		ИЛИ КорневойТип = "Задача" 
		ИЛИ КорневойТип = "Документ"
		ИЛИ КорневойТип = "ПланВидовРасчета" 
		ИЛИ КорневойТип = "ПланВидовХарактеристик" 
		ИЛИ КорневойТип = "ПланОбмена"
		ИЛИ КорневойТип = "ПланСчетов" 
		ИЛИ КорневойТип = "Справочник"
	Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;

КонецФункции // ЛксЛиКорневойТипОбъектаБД()

// Функция возвращает менеджер объекта по переданному значению
// Значение может быть типом или ссылкой
//
// Параметры:
//  пОбъект  - Тип, Ссылка - Обязательный параметр
//           Объект, для которого необходимо определить менеджер
//
// Возвращаемое значение:
//   Произвольный   
//		- менеджер объетка при успешном выполнении (ДокументМенеджер, СправочникМенеджер и т.д.)
//	    или Неопределено, если получение менеджера для переданного значения невозможно
//
// 20140121 Заяш 
//
Функция Менеджер_Получить(Знач пОбъект) Экспорт

	Если ТипЗнч(пОбъект) = Тип("Тип") Тогда
		ТипОбъекта = пОбъект;
	ИначеЕсли ТипЗнч(пОбъект) = Тип("ОбъектМетаданных") Тогда
		ТипОбъекта = Тип_ПолучитьПоМетаданным(пОбъект);
	Иначе
		ТипОбъекта = ТипЗнч(пОбъект);
	КонецЕсли;
	
	Если Не Тип_ЭтоСсылка(ТипОбъекта) Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	ИмяОбъекта = Метаданные.НайтиПоТипу(ТипОбъекта).Имя;
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипОбъекта) Тогда
		Возврат Справочники[ИмяОбъекта];
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипОбъекта) Тогда
		Возврат Документы[ИмяОбъекта];
		
	#Если Не МобильноеПриложениеСервер Тогда		
	ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипОбъекта) Тогда
		Возврат ПланыВидовХарактеристик[ИмяОбъекта];
	ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипОбъекта) Тогда
		Возврат ПланыСчетов[ИмяОбъекта];
	ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипОбъекта) Тогда
		Возврат ПланыВидовРасчета[ИмяОбъекта];
	ИначеЕсли БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипОбъекта) Тогда
		Возврат БизнесПроцессы[ИмяОбъекта];
	ИначеЕсли Задачи.ТипВсеСсылки().СодержитТип(ТипОбъекта) Тогда
		Возврат Задачи[ИмяОбъекта];
	#КонецЕсли	
	
	ИначеЕсли ПланыОбмена.ТипВсеСсылки().СодержитТип(ТипОбъекта) Тогда
		Возврат ПланыОбмена[ИмяОбъекта];
	ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипОбъекта) Тогда
		Возврат Перечисления[ИмяОбъекта];
	Иначе
		Возврат НеОпределено;
	КонецЕсли;

КонецФункции

Функция Менеджер_СоздатьОбъект(Менеджер) Экспорт
	
	КорневойТип = Общ.КорневойТипКонфигурации_Получить(Менеджер.ПустаяСсылка());
	Если КорневойТип = "БизнесПроцесс" Тогда 
		Результат = Менеджер.СоздатьБизнесПроцесс();
		
	ИначеЕсли КорневойТип = "Задача" Тогда
		Результат = Менеджер.СоздатьЗадачу();
		
	ИначеЕсли КорневойТип = "Документ" Тогда
		Результат = Менеджер.СоздатьДокумент();
		
	ИначеЕсли КорневойТип = "ПланВидовРасчета" Тогда 
		Результат = Менеджер.СоздатьВидРасчета();
		
	ИначеЕсли КорневойТип = "ПланВидовХарактеристик" Тогда 
		Результат = Менеджер.СоздатьЭлемент();
		
	ИначеЕсли КорневойТип = "ПланОбмена" Тогда
		Результат = Менеджер.СоздатьУзел();
		
	ИначеЕсли КорневойТип = "ПланСчетов" Тогда 
		Результат = Менеджер.СоздатьСчет();
		
	ИначеЕсли КорневойТип = "Справочник" Тогда
		Результат = Менеджер.СоздатьЭлемент();
		
	КонецЕсли;
	
КонецФункции

//Для Объект = Неопределено возвращает Ложь, работает только для русского и английского языков платформы
// Параметры:
//  КоличествоПараметров - нужно задать заведомо большее значение, чем может быть у метода 
//
// 20211030 Заяш 
// Автор TormozIT
// Взято из подсистемы "ИнструментыРазработчика"
// ирОбщий.МетодРеализованЛкс
//
Функция МетодРеализован(Объект, ИмяМетода) Экспорт
	
	Если Объект = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	Выражение = "Объект." + ИмяМетода + "(,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,)";
	Попытка
		Выполнить(Выражение);
	Исключение
		Инфо = ИнформацияОбОшибке();
		Описание = Инфо.Описание;
	КонецПопытки;
	Результат = Найти(НРег(Описание), "(" + НРег(ИмяМетода) + ")") = 0;
	Возврат Результат;
	
КонецФункции

Функция ОписаниеТиповСтроки_Получить(ДлинаСтроки) Экспорт

	Возврат Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(ДлинаСтроки, ДопустимаяДлина.Переменная));

КонецФункции // ОписаниеТиповСтроки_Получить()

// Функция проверяет тип объекта
// Если тип не соответсвует вызывается исключение, или возвращается сообщение об ошибке.
Функция Проверка_Тип(парамОбъект, Знач ПроверяемыйТип, Вызвать_Исключение = Истина) Экспорт
	
	// ПРОВЕРКА ВХОДНЫХ ПАРАМЕТРОВ
	Если 
			Не ТипЗнч(ПроверяемыйТип) = Тип("Строка")
		И 	Не ТипЗнч(ПроверяемыйТип) = Тип("Тип") 
		И 	Не ТипЗнч(ПроверяемыйТип) = Тип("ОписаниеТипов")
	Тогда
		ВызватьИсключение 
			СтрШаблон(
				"Неверный тип параметра #2 '%1'. Параметр может иметь тип 'Строка', 'Тип' или 'ОписаниеТипов'",
				Тип_ПолучитьСтроковоеПредставление(ПроверяемыйТип)
				);
	КонецЕсли;

	// Обработка массива переменных
	Если 	ТипЗнч(парамОбъект) = Тип("Массив") 
		И	Не ПроверяемыйТип = "Массив"
		И	Не ПроверяемыйТип = Тип("Массив")
		И 	Не (ПроверяемыйТип = Тип("ОписаниеТипов") И ПроверяемыйТип.СодержитТип(Тип("Массив")))
	Тогда
		МассивОбъектов = парамОбъект;	
		
	Иначе
		МассивОбъектов = Новый Массив;
		МассивОбъектов.Добавить(парамОбъект);
		
	КонецЕсли;
	
	// ОСНОВНОЙ АЛГОРИТМ
	Ошибка_Описание = "";
	
	ДопустимТипНеопределено = Ложь;
	
	//+НА 20170320 Заяш 
	// Если Тип для проверки — строка. Тогда преобразовать его к описанию типов
	Если ТипЗнч(ПроверяемыйТип) = Тип("Строка") Тогда
		
		Попытка
			МассивИменТипов = СтрРазделить(ВРЕГ(ПроверяемыйТип), ",", Ложь);
			МассивТипов = Новый Массив;
			Для Каждого ИмяТипа Из МассивИменТипов Цикл
				ИмяТипа = СокрЛП(ИмяТипа);
				Если ИмяТипа = "НЕОПРЕДЕЛЕНО" Тогда
					ДопустимТипНеопределено = Истина;
				КонецЕсли;
				МассивТипов.Добавить(Тип(ИмяТипа));
				
			КонецЦикла;
			ИмяТипа = Неопределено;
			ПроверяемыйТип = Новый ОписаниеТипов(МассивТипов);
			
		Исключение
			ВызватьИсключение 
				СтрШаблон(
					"Неверное значение параметра #2. Тип '%1' не существует
					|%2",
					Строка(ПроверяемыйТип),
					ОписаниеОшибки()
					);
		КонецПопытки;
		
	КонецЕсли;
	
	Для Каждого ПроверяемыйОбъект Из МассивОбъектов Цикл
		
		Если ПроверяемыйОбъект = Неопределено И ДопустимТипНеопределено Тогда
			// ОК	
		
		ИначеЕсли  
			// Описание типов не содержит тип переданного объекта
			(ТипЗнч(ПроверяемыйТип) = Тип("ОписаниеТипов") И Не ПроверяемыйТип.СодержитТип(ТипЗнч(ПроверяемыйОбъект)))
			// И объект не соответствует переданному типу
			ИЛИ (ТипЗнч(ПроверяемыйТип) = Тип("Тип") И Не ТипЗнч(ПроверяемыйОбъект) = ПроверяемыйТип)
		Тогда
	
			Если ТипЗнч(ПроверяемыйТип) = Тип("ОписаниеТипов") Тогда
				ОписаниеПроверяемогоТипа  = "";
				Для Каждого Тип Из ПроверяемыйТип.Типы() Цикл
					ОписаниеПроверяемогоТипа = ОписаниеПроверяемогоТипа + Тип_ПолучитьСтроковоеПредставление(Тип) +Символы.ПС;
				КонецЦикла;
				ОписаниеПроверяемогоТипа = СокрЛП(ОписаниеПроверяемогоТипа);
			ИначеЕсли ТипЗнч(ПроверяемыйТип) = Тип("Тип") Тогда
				ОписаниеПроверяемогоТипа = Тип_ПолучитьСтроковоеПредставление(ПроверяемыйТип);
			Иначе
				ОписаниеПроверяемогоТипа = "";
			КонецЕсли;
			Ошибка_Описание = 
				СтрШаблон(
					"Тип параметра ""%1"" не соответствует типу ""%2""%3. 
					|Параметр ""%1"" имеет тип ""%4""",
					ПроверяемыйОбъект, // %1 
					ОписаниеПроверяемогоТипа, //%2
					?(ДопустимТипНеопределено, " или ""Неопределено""", ""), // %3
					Тип_ПолучитьСтроковоеПредставление(ТипЗнч(ПроверяемыйОбъект)) // %4
					);

		КонецЕсли;

	КонецЦикла;
	ПроверяемыйОбъект = Неопределено;
		
	Если Не ЗначениеЗаполнено(Ошибка_Описание) Тогда 
		Возврат "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ошибка_Описание) И Вызвать_Исключение Тогда
		Ошибка_Описание = 	
			Ошибка_Описание+"
			|Обратитесь к разработчику.";
		ВызватьИсключение 
			Ошибка_Описание;
	КонецЕсли;
		
	Возврат Ошибка_Описание;

КонецФункции

// Процедура устанавливает отбор СКД. Используется для СКД и отборов динамических списков
//
// Параметры:
//		ОтборСКД
//			Обязательный, отбор СКД или группа элементов отбора компоновки данных
//			Отбор, в котором необходимо установить элемент
//		ЛевоеЗначение
//			Обязательный, Строка или ПолеКомпоновкиДанных
//			Поле, по которому будет происходить отбор
//		ПравоеЗначение
//			Обязательный, произвольный
//			Значение для отбора
//		ВидСравненияСКД
//			Необязательный, ВидСравненияКомпоновкиДанных
//			По умолчанию неопределено
//			Если значение не заполнено, будет взят вид сравнения "Равно".
//		Использование
//			Необязательный, Булево
//			По умолчанию Истина
//			Признак, использовать параметр или нет
// 		ЭлементОтбораДанных
//			Необязательный, не заполнять
//			Нужен для рекурсивной работы процедуры
//
// 20120905103206 Заяш
// 
Процедура СКД_Отбор_Установить(
		ОтборСКД, 
		знач ЛевоеЗначение, 
		знач ПравоеЗначение, 
		ВидСравненияСКД = Неопределено, 
		Использование = Истина, 
		ЭлементОтбораДанных = Неопределено
		) Экспорт
	
	Проверка_Тип(Использование, Тип("Булево"));
	
	Если ТипЗнч(ЛевоеЗначение) = Тип("Строка") Тогда
		ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ЛевоеЗначение);
	КонецЕсли;
	   
	Если ВидСравненияСКД = Неопределено Тогда
		ВидСравненияСКД = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	
	ЭлементыОтбора = ОтборСКД.Элементы;
	
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			// Вызвать рекурсивно эту процедуру
			СКД_Отбор_Установить(ЭлементОтбора, ЛевоеЗначение, ПравоеЗначение, ВидСравненияСКД, Использование, ЭлементОтбораДанных);
			Продолжить;
		КонецЕсли;
		
		Если ЭлементОтбора.ЛевоеЗначение = ЛевоеЗначение Тогда
			Если ЭлементОтбораДанных = Неопределено Тогда
				ЭлементОтбораДанных = ЭлементОтбора;
				ЭлементОтбораДанных.ВидСравнения = ВидСравненияСКД;
				ЭлементОтбораДанных.ПравоеЗначение = ПравоеЗначение;
				ЭлементОтбораДанных.Использование = Использование;
			Иначе
				ЭлементОтбора.Использование = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Если элемент отбора не найден, добавить новый в корень и установить ему значения
	Если ЭлементОтбораДанных = Неопределено И ТипЗнч(ОтборСКД) = Тип("ОтборКомпоновкиДанных") Тогда
		ЭлементОтбораДанных = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораДанных.ЛевоеЗначение = ЛевоеЗначение;
		ЭлементОтбораДанных.ВидСравнения = ВидСравненияСКД;
		ЭлементОтбораДанных.ПравоеЗначение = ПравоеЗначение;
		ЭлементОтбораДанных.Использование = Использование;
	КонецЕсли;
	
КонецПроцедуры

Процедура СправочникОбъект_УстановитьУИДкакКод(СправочникОбъект) Экспорт
	
	//+Гуртам 20210819 Заяш https://jira.gurtam.team/browse/AUT-1761 
	ИДСтрокой = "";
	
	Если СправочникОбъект.ЭтоНовый() И Не ЗначениеЗаполнено(СправочникОбъект.Ссылка) Тогда
		СсылкаНового = Неопределено;
		
		Если СправочникОбъект.ДополнительныеСвойства.Свойство("СсылкаНового") Тогда
			СсылкаНового = СправочникОбъект.ДополнительныеСвойства.СсылкаНового;
			
		КонецЕсли;
		
		Если
					ТипЗнч(СсылкаНового) <> ТипЗнч(СправочникОбъект.Ссылка)
			 ИЛИ	Не ЗначениеЗаполнено(СсылкаНового)
 		Тогда
			СправочникМенеджер = Общ.Менеджер_Получить(СправочникОбъект.Ссылка);
			СсылкаНового = СправочникМенеджер.ПолучитьСсылку();
			
		КонецЕсли;

		СправочникОбъект.УстановитьСсылкуНового(СсылкаНового);
		
		ИДСтрокой = Строка(СсылкаНового.УникальныйИдентификатор());
		
	КонецЕсли;
	
	Если СправочникОбъект.ЭтоНовый() Тогда
		СправочникОбъект.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		
	КонецЕсли;

	// Установить код равный уникальному идентификатору
	Если ЗначениеЗаполнено(СправочникОбъект.Ссылка) Тогда
		ИДСтрокой = Строка(СправочникОбъект.Ссылка.УникальныйИдентификатор());
		
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ИДСтрокой) И СправочникОбъект.Код <> ИДСтрокой Тогда
		СправочникОбъект.Код = ИДСтрокой;
		
	КонецЕсли;
	
КонецПроцедуры

Функция Ссылка_ИмяТаблицы(СсылкаНаОбъект) Экспорт
	
	Возврат СтрЗаменить(СериализаторXDTO.XMLТипЗнч(СсылкаНаОбъект).ИмяТипа,"Ref.",".");
	
КонецФункции

Функция СсылкаСуществует(СсылкаНаОбъект) Экспорт
    
    Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаОбъект);
	Запрос.Текст = 
		СтрШаблон(
			"Выбрать Таб.Ссылка ИЗ %1 КАК Таб ГДЕ Таб.Ссылка = &СсылкаНаОбъект",
			Ссылка_ИмяТаблицы(СсылкаНаОбъект),
			);
			
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Не Запрос.Выполнить().Пустой();
	Запрос = Неопределено;

	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
    
КонецФункции

Функция Строка_УдалитьНедопустимыеСимволы(стр, ДопустимыеСимволы) Экспорт

	Возврат СтрСоединить(СтрРазделить(стр, СтрСоединить(СтрРазделить(стр, ДопустимыеСимволы))))

КонецФункции

// Функция для преобразования табличного документа в таблицу значений.
// Предполагается, что в первой строке табличного документа содержаться имена колонок.
//
// Параметры
//  ТабличныйДокумент
//		Обязательный, ТабличныйДокумент
//		Табличный документ, который нужно преобразовать в таблицу значений
//
// Возвращаемое значение:
//   ТаблицаЗначений
//
// 20121010 Заяш
//
Функция ТабличныйДокумент_ВТаблицуЗначений(ТабличныйДокумент) Экспорт
	
	ТЗ=Новый ТаблицаЗначений();
	
	//Считываем колонки
	Для Стр=1 По ТабличныйДокумент.ВысотаТаблицы Цикл
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
		Если Стр>1 Тогда
			ТекСтр=ТЗ.Добавить();
		КонецЕсли;
		ПустаяСтрока=истина;
		Для Кол=1 По ТабличныйДокумент.ШиринаТаблицы Цикл
			Яч=ТабличныйДокумент.Область(Стр, Кол);
			Если Яч.СодержитЗначение Тогда
				Зн=Яч.Значение;
			Иначе
				Зн=Яч.Текст;
			КонецЕсли;
			Если ТипЗнч(Зн)=Тип("Строка") И ПустаяСтрока(Зн) Тогда
				Зн=Неопределено;
			КонецЕсли;
			
			//Добавляем колонку
			Если Стр=1 Тогда
				
				// В имени колонки убрать пробелы
				Зн = СокрЛП(Зн);
				Зн = СтрЗаменить(Зн, " ", "_");
				Зн = СтрЗаменить(Зн, Символы.ПС, "");
				Зн = СтрЗаменить(Зн, "-", "");
				
				// Если в таблице уже есть колонка стаким именем, добавить номер
				Если ТЗ.Колонки.Найти(Зн) <> Неопределено Тогда
					Счетчик = 0;
					
					Пока Истина Цикл
						Счетчик = Счетчик + 1;
						
						ЗнСоСчетчиком = Зн + "_" + Счетчик;
						
						НайденнаяКолонка = ТЗ.Колонки.Найти(ЗнСоСчетчиком);
						
						Если НайденнаяКолонка = Неопределено Тогда
							Зн = ЗнСоСчетчиком;
							Прервать;
							
						Иначе
							Продолжить;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				ТЗ.Колонки.Добавить(Зн, ОписаниеТиповСтроки_Получить(255));
				
			Иначе
				ТекСтр[Кол-1]=Зн;
				
			КонецЕсли;
			
		КонецЦикла;
		Кол = Неопределено;
		
	КонецЦикла;
	Стр = Неопределено;
	
	Возврат ТЗ;
	
КонецФункции // ТабличныйДокумент_ВТаблицуЗначений()

// Получает ссылочный тип по метаданным.
//
// Параметры:
//  пМетаданные  – ОбъектМетаданных.
//
// Возвращаемое значение:
//               – Тип - ссылочный;
//  Неопределено – тип нельзя получить.
//
// 20140121 Заяш 
// Автор TormozIT
// Взять из подситстемы ИнструментыРазработчика
// ирГлобальный.ЛксПолучитьСсылочныйТипПоМетаданным(пМетаданные)
//
Функция Тип_ПолучитьПоМетаданным(пМетаданные) Экспорт

	Результат = Неопределено;
	КорневойТип = КорневойТипКонфигурации_Получить(пМетаданные);
	Если КорневойТипКонфигурации_Проверить(КорневойТип) Тогда 
		Результат = Тип(КорневойТип + "Ссылка." + пМетаданные.Имя);
	КонецЕсли;
	Возврат Результат;

КонецФункции // Тип_ПолучитьПоМетаданным()

// Предназначена для получения пустого значения заданного типа:
//	примитивного, или ссылочного. Используется
//
// Параметры:
//	ЗаданныйТип   - тип, пустое значение которого нужно получить
//
Функция Тип_ПолучитьПустоеЗначение(ЗаданныйТип) Экспорт
	
	Если ЗаданныйТип = Тип("Число") Тогда
		Возврат 0;
	ИначеЕсли ЗаданныйТип = Тип("Строка") Тогда
		Возврат "";
	ИначеЕсли ЗаданныйТип = Тип("Дата") Тогда
		Возврат '00010101000000';
	ИначеЕсли ЗаданныйТип = Тип("Булево") Тогда
		Возврат Ложь;
	ИначеЕсли ЗаданныйТип = Тип("Неопределено") Тогда
		Возврат Неопределено;
	ИначеЕсли ТипЗнч(ЗаданныйТип) = Тип("ОписаниеТипов") Тогда
		Если ЗаданныйТип.Типы().Количество() = 0 Тогда
			Возврат Неопределено;
		Иначе
			Возврат Новый(ЗаданныйТип.Типы()[0]);
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЗаданныйТип) = Тип("Тип") Тогда
		Возврат Новый(ЗаданныйТип);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // ПустоеЗначениеТипа();

// Возвращает строковое представление типа. 
// Для ссылочных типов возвращает в формате "СправочникСсылка.ИмяОбъекта" или "ДокументСсылка.ИмяОбъекта"
// Для остальных типов приводит тип к строке, например "Число".
//
// 20130331 Заяш. Функция взята из модуля ОбщегоНазначения стандартных конфигураций
Функция Тип_ПолучитьСтроковоеПредставление(Знач Тип) Экспорт

	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Тогда
		
		Представление = "";
		
		Если Не ТипЗнч(Тип) = Тип("Тип") Тогда
			Тип = ТипЗнч(Тип);
		КонецЕсли;	
		
		Если ЭтоСсылка(Тип) Тогда
		
			ПолноеИмя = Метаданные.НайтиПоТипу(Тип).ПолноеИмя();
			ИмяОбъекта = СтрРазделить(ПолноеИмя, ".")[1];
			
			Если Справочники.ТипВсеСсылки().СодержитТип(Тип) Тогда
				Представление = "СправочникСсылка";
			
			ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(Тип) Тогда
				Представление = "ДокументСсылка";
			
			ИначеЕсли БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип) Тогда
				Представление = "БизнесПроцессСсылка";
			
			ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип) Тогда
				Представление = "ПланВидовХарактеристикСсылка";
			
			ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип) Тогда
				Представление = "ПланСчетовСсылка";
			
			ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип) Тогда
				Представление = "ПланВидовРасчетаСсылка";
			
			ИначеЕсли Задачи.ТипВсеСсылки().СодержитТип(Тип) Тогда
				Представление = "ЗадачаСсылка";
			
			ИначеЕсли ПланыОбмена.ТипВсеСсылки().СодержитТип(Тип) Тогда
				Представление = "ПланОбменаСсылка";
			
			ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(Тип) Тогда
				Представление = "ПеречислениеСсылка";
				
			
			КонецЕсли;
			
			Результат = ?(Представление = "", Представление, Представление + "." + ИмяОбъекта);
			
		Иначе
			
			Результат = Строка(Тип);
			
		КонецЕсли;
		
		Возврат Результат;
	
	#Иначе // Все кроме толстого клиента обычного приложения выполнять на сервере
		
		// Выполнать через попытку, чтобы исключить передачу мутабельного значения на сервер
		Попытка
			Возврат общ_Сервер.Тип_ПолучитьСтроковоеПредставление(Тип);
			
		Исключение
			Возврат Строка(Тип);
			
		КонецПопытки;
		
	#КонецЕсли
	
КонецФункции

// Проверка того, что тип имеет ссылочный тип данных
//
// Параметры:
//	Тип — Тип или объект метаданных
//		необходимо проверить, педставляет ли этот тип
//
//	Возвращает:
//		Булево — признак того, что это ссылка
//
Функция Тип_ЭтоСсылка(Знач Тип) Экспорт
 
	Если Тип = Тип("Неопределено") Тогда
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(Тип) = Тип("Тип") Тогда
		Возврат 
			Справочники.ТипВсеСсылки().СодержитТип(Тип)
			ИЛИ Документы.ТипВсеСсылки().СодержитТип(Тип)
			ИЛИ Перечисления.ТипВсеСсылки().СодержитТип(Тип)
			
			#Если Не МобильноеПриложениеСервер Тогда
			ИЛИ ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип)
			ИЛИ ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип)
			ИЛИ ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип)
			ИЛИ БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип)
			ИЛИ БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().СодержитТип(Тип)
			ИЛИ Задачи.ТипВсеСсылки().СодержитТип(Тип)
			#КонецЕсли
			
			ИЛИ ПланыОбмена.ТипВсеСсылки().СодержитТип(Тип);
			
	ИначеЕсли ТипЗнч(Тип) = Тип("ОбъектМетаданных") Тогда
		Возврат
			Метаданные.Справочники.Содержит(Тип)
			ИЛИ Метаданные.Документы.Содержит(Тип)
			ИЛИ Метаданные.Перечисления.Содержит(Тип)
			ИЛИ Метаданные.ПланыВидовХарактеристик.Содержит(Тип)
			
			#Если Не МобильноеПриложениеСервер Тогда
			ИЛИ Метаданные.ПланыСчетов.Содержит(Тип)
			ИЛИ Метаданные.ПланыВидовРасчета.Содержит(Тип)
			ИЛИ Метаданные.БизнесПроцессы.Содержит(Тип)
			ИЛИ Метаданные.Задачи.Содержит(Тип)
			#КонецЕсли
			
			ИЛИ Метаданные.ПланыОбмена.Содержит(Тип);
			
	Иначе
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

Функция Число_ВСтроку_ДополнитьЛидирующимиНулями(пЧисло, КоличествоСимволов) Экспорт
	
	Число = Число(пЧисло);
	Общ.Проверка_Тип(КоличествоСимволов, "Число");
	
	ФорматнаяСтрока = 
		СтрШаблон(
			"ЧЦ=%1; ЧВН=; ЧГ=0",
			Формат(КоличествоСимволов, "ЧДЦ=0; ЧГ=0")
			);
	
	Возврат Формат(Число, ФорматнаяСтрока);
	
КонецФункции

Функция ЭтоСсылка(пЗначение) Экспорт
	
	Если ТипЗнч(пЗначение) = Тип("Тип") Тогда	
		Возврат Тип_ЭтоСсылка(пЗначение);
	Иначе 
		Возврат Тип_ЭтоСсылка(ТипЗнч(пЗначение));
	КонецЕсли;

КонецФункции

Функция ЭтоЗаполненнаяСсылка(ПроверяемоеЗначение) Экспорт
	
	Возврат ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ПроверяемоеЗначение)) И ЗначениеЗаполнено(ПроверяемоеЗначение);
	
КонецФункции

