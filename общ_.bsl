Функция Документ_Обработать(ДокументСсылка, ВидОбработки) Экспорт
	
	// Проверить вид обработки
	Если Не Документы_ВидОбработки_Проверить(ВидОбработки) Тогда
		Возврат "";
		
	КонецЕсли;
	
	// Проверить корневой тип конфигурации, чтобы это был документ
	КорневойТипКонфигурации = КорневойТипКонфигурации_Получить(ДокументСсылка);
	
	// Если это не документ, тогда сообщить об этом
	Если КорневойТипКонфигурации <> "Документ" Тогда
		Возврат 
			СтрШаблон(
				"""%1"" не является ссылкой на документ",
				ДокументСсылка
				);
		
	КонецЕсли;
	
	// Далее выполняем все через попытку
	Попытка

		// Проверить вид обработки
		Если ВидОбработки = "Проведение" Тогда
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
		ИначеЕсли ВидОбработки = "ОтменаПроведения" Тогда
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			
		ИначеЕсли ВидОбработки = "УстановитьПометкуУдаления" Тогда
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			ДокументОбъект.УстановитьПометкуУдаления(Истина);
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			
		ИначеЕсли ВидОбработки = "СнятьПометкуУдаления" Тогда
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			ДокументОбъект.УстановитьПометкуУдаления(Ложь);
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			
		//+Гуртам 20210603 Заяш
		ИначеЕсли ВидОбработки = "ПереформироватьДвижения" Тогда
			СтруктураДополнительныеСвойства = Новый Структура;
			СтруктураДополнительныеСвойства.Вставить("ТаблицыДляДвижений",Новый Структура);	
			
			ГРТМ_Учет.ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства);
			
			Если  
				СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаГРТМ_Учет")
				И	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаГРТМ_Учет.Количество() > 0 
			Тогда
				ДвиженияГРТМ_Учет = РегистрыБухгалтерии.ГРТМ.СоздатьНаборЗаписей();
				ДвиженияГРТМ_Учет.Отбор.Регистратор.Установить(ДокументСсылка);
				ДвиженияГРТМ_Учет.Очистить();
				ДвиженияГРТМ_Учет.Записывать = Истина;
				Для Каждого СтрТ Из  СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаГРТМ_Учет Цикл 
					Движение =  ДвиженияГРТМ_Учет.Добавить();
					ЗаполнитьЗначенияСвойств(Движение,СтрТ,,"СубконтоДТ,СубконтоКТ");
					Для Каждого ВидСубконтоДТ Из Движение.СчетДт.ВидыСубконто Цикл 
						Движение.СубконтоДт[ВидСубконтоДТ.ВидСубконто] =
						СтрТ.СубконтоДТ.Получить(ВидСубконтоДТ.ВидСубконто);
					КонецЦикла;
					ВидСубконтоДТ = Неопределено;
					
					Для Каждого ВидСубконтоКТ Из Движение.СчетКт.ВидыСубконто Цикл 
						Движение.СубконтоКт[ВидСубконтоКТ.ВидСубконто] =
						СтрТ.СубконтоКТ.Получить(ВидСубконтоКТ.ВидСубконто);
					КонецЦикла;
					ВидСубконтоКТ = Неопределено;
					
				КонецЦикла;
				СтрТ = Неопределено;
				
				ДвиженияГРТМ_Учет.Записать(Истина);
				
			КонецЕсли;	
			
		КонецЕсли; // Если ВидОбработки =

	Исключение
		// Вернуть описание ошибки при проведении документа
		Возврат
			СтрШаблон(
				"Ошибка при обработке документа ""%1"" по причине:
				|%2",
				ДокументСсылка,
				ОписаниеОшибки()
				);
		
	КонецПопытки;

	// Если все хорошо, вернуть пустую строку
	Возврат "";
	
КонецФункции

Функция Документы_Массив_СортироватьПоДате(МассивСсылокДокументов, ЗНАЧ стрНаправлениеСортировки = "ВОЗР") Экспорт
	
	Проверка_Тип(МассивСсылокДокументов, "Массив");
	Проверка_Тип(стрНаправлениеСортировки, "Строка");
	
	стрНаправлениеСортировки = ВРЕГ(НаправлениеСортировки);
	
	Если стрНаправлениеСортировки = "ВОЗР" Тогда 
		// ОК
		
	ИначеЕсли стрНаправлениеСортировки = "УБЫВ" Тогда
		// ОК
		
	Иначе
		стрНаправлениеСортировки = "ВОЗР";
		
	КонецЕсли;
	
	ТаблицаДляСортировки = Новый ТаблицаЗначений;
	ТаблицаДляСортировки.Колонки.Добавить("Ссылка");
	ТаблицаДляСортировки.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаДляСортировки.Колонки.Добавить("МоментВремени", Новый ОписаниеТипов("МоментВремени"));
	
	СоответствиеСсылок = Новый Соответствие;
		
	Для Каждого ДокументСсылка Из МассивСсылокДокументов Цикл
		
		// Проверить что документ ссылка насамом деле является ссылкой на документ
		
		// Проверить корневой тип конфигурации, чтобы это был документ
		КорневойТипКонфигурации = КорневойТипКонфигурации_Получить(ДокументСсылка);
		
		// Если это не документ, тогда сообщить об этом
		Если КорневойТипКонфигурации <> "Документ" Тогда
			Продолжить;
			
		КонецЕсли;
		
		// Если Ссылка уже есть в соответствии, не нужно добавлять ее в таблицу еще раз
		ДокументСсылка_УжеДобавлено = Не СоответствиеСсылок.Получить(ДокументСсылка.Ссылка) = Неопределено;
		Если ДокументСсылка_УжеДобавлено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = ТаблицаДляСортировки.Добавить();
		СтрокаТаблицы.Ссылка = ДокументСсылка.Ссылка;
		СтрокаТаблицы.Дата = ДокументСсылка.Дата;
		СтрокаТаблицы.МоментВремени = ДокументСсылка.МоментВремени();
		
		// Добавить ссылку в соответствие
		СоответствиеСсылок.Вставить(ДокументСсылка.Ссылка, ДокументСсылка.Ссылка);
		
	КонецЦикла;
	
	ТаблицаДляСортировки.Сортировать(
		СтрШаблон(
			"Дата %1, МоментВремени %1",
			стрНаправлениеСортировки
			)
		);
		
	МассивНаВозврат = ТаблицаДляСортировки.ВыгрузитьКолонку("Ссылка");
	
	Проверка_Тип(МассивНаВозврат, "Массив");
		
	Возврат МассивНаВозврат;
	
КонецФункции

Функция Документы_ВидыОбработки()
	
	ВидыОбработки = Новый Структура;
	
	ВидыОбработки.Вставить("Проведение", "Проведение"); 
	ВидыОбработки.Вставить("ОтменаПроведения", "ОтменаПроведения"); 
	ВидыОбработки.Вставить("УстановитьПометкуУдаления", "УстановитьПометкуУдаления"); 
	ВидыОбработки.Вставить("СнятьПометкуУдаления", "СнятьПометкуУдаления");
	ВидыОбработки.Вставить("ПереформироватьДвижения", "ПереформироватьДвижения");
	
	Возврат ВидыОбработки;
	
КонецФункции

Функция Документы_ВидОбработки_Представление_Получить(ВидОбработки) Экспорт
	
	// Проверить вид обработки
	Если ВидОбработки = "Проведение" Тогда
		Возврат "Проведение";
		
	ИначеЕсли ВидОбработки = "ОтменаПроведения" Тогда
		Возврат "Отмена проведения";
		
	ИначеЕсли ВидОбработки = "УстановитьПометкуУдаления" Тогда
		Возврат "Пометка на удаление";
		
	ИначеЕсли ВидОбработки = "СнятьПометкуУдаления" Тогда
		Возврат "Снятие пометки на удаление";
		
	Иначе
		Возврат "Обработка";
		
	КонецЕсли;
	
КонецФункции

Функция Документы_ВидОбработки_Проверить(ВидОбработки) Экспорт
	
	// Проверить вид обработки
	Если ВидОбработки = "Проведение" Тогда
		Возврат Истина;
		
	ИначеЕсли ВидОбработки = "ОтменаПроведения" Тогда
		Возврат Истина;
		
	ИначеЕсли ВидОбработки = "УстановитьПометкуУдаления" Тогда
		Возврат Истина;
		
	ИначеЕсли ВидОбработки = "СнятьПометкуУдаления" Тогда
		Возврат Истина;
		
	ИначеЕсли ВидОбработки = "ПереформироватьДвижения" Тогда
		Возврат Истина;
		
	Иначе
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

Функция Коллекция_ЗаписатьJSONсСортировкой(Коллекция, СортироватьРекурсивно = Ложь) Экспорт
	
	Проверка_Тип(Коллекция, "Массив, Структура, Соответствие");

	ЗаписьJSON = Новый ЗаписьJSON;
	ПараметрыЗаписи = Новый ПараметрыЗаписиJSON(, Символы.Таб);	
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписи);
	ЗаписатьJSON(ЗаписьJSON, Коллекция_Сортировать(Коллекция, СортироватьРекурсивно), , "ФункцияПреобразованияJSON", Общ);

	СтрJSON = ЗаписьJSON.Закрыть();
	
	Возврат СтрJSON;
	
КонецФункции

Функция ФункцияПреобразованияJSON(Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт

	Если Значение = Null Тогда
		Возврат Неопределено;
		
	ИначеЕсли ЭтоСсылка(Значение) Тогда 
		Возврат Коллекция_Сортировать(ОбъектСсылочныйВКоллекцию(Значение), Истина);

	Иначе
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

Функция Коллекция_ПолучитьЗначениеПоПути(ОбразОбъекта, Путь, Разделитель = ".") Экспорт

	ШагиПути = СтрРазделить(Путь, Разделитель);
	ВсегоШагов = ШагиПути.Количество();
	СчетчикШагов = 0;
	ЗначениеШага = ОбразОбъекта;
	Для Каждого Шаг Из ШагиПути Цикл
		СчетчикШагов = СчетчикШагов + 1;
		ЭтоПоследнийШаг = СчетчикШагов = ВсегоШагов;
		
		ШагСуществует = Общ.Коллекция_Свойство(ЗначениеШага, Шаг, ЗначениеШага);
		
		Если Не ШагСуществует Тогда
			Возврат Null;
			
		КонецЕсли;
		
		// Все шаги кроме последнего должны вернуть коллекцию
		// Иначе дальнейшая обработка не имеет смысла
		ЗначениеШагаЭтоКоллекция = Общ.Проверка_Тип(ЗначениеШага, "Структура, Соответствие", Ложь) = ""; 
		Если Не ЭтоПоследнийШаг И Не ЗначениеШагаЭтоКоллекция Тогда
			Возврат Null;
			
		КонецЕсли;
		
		// Последний шаг содержит искомое значение
		Если ЭтоПоследнийШаг Тогда
			Возврат ЗначениеШага;
			
		КонецЕсли;
		
	КонецЦикла;
	Шаг = Неопределено; 
	
	Возврат Null;
	
КонецФункции

// Вспомогательная функция. Сортировать коллекцию не имеет смысла при операциях в программе,
// Но иногда нужно чтобы ключи коллекции при записи в JSON располагались по алфавиту
//
Функция Коллекция_Сортировать(Коллекция, СортироватьРекурсивно = Ложь) Экспорт

	Если ТипЗнч(Коллекция) = Тип("Массив") И СортироватьРекурсивно Тогда
		ОтсортированныйМассив = Новый Массив;
		Для Каждого ЭлементМассива Из Коллекция Цикл
			ОтсортированныйЭлемент = Коллекция_Сортировать(ЭлементМассива, СортироватьРекурсивно);
			ОтсортированныйМассив.Добавить(ОтсортированныйЭлемент);
			
		КонецЦикла;
		ЭлементМассива = Неопределено;
		
		Возврат ОтсортированныйМассив;
		
	ИначеЕсли Типзнч(Коллекция) = Тип("Массив") Тогда
		Возврат Коллекция;
		
	ИначеЕсли Проверка_Тип(Коллекция, "Структура, Соответствие", Ложь) = "" Тогда	
		ТаблицаКлючей = Новый ТаблицаЗначений;
		ТаблицаКлючей.Колонки.Добавить("Ключ");
		
		Для Каждого Пара Из Коллекция Цикл
			СтрокаТаблицыКлючей = ТаблицаКлючей.Добавить();
			СтрокаТаблицыКлючей.Ключ = Пара.Ключ;
			
		КонецЦикла;
		Пара = Неопределено;   
		
		// Соответсвие выводится в JSON в обратном порядке
		Если ТипЗнч(Коллекция) = Тип("Соответствие") Тогда
			ТаблицаКлючей.Сортировать("Ключ Убыв");
			
		// Структура выводится в JSON в прямом порядке
		ИначеЕсли ТипЗнч(Коллекция) = Тип("Структура") Тогда
			ТаблицаКлючей.Сортировать("Ключ");
			
		КонецЕсли;
		
		Если ТипЗнч(Коллекция) = Тип("Структура") Тогда
			ОтсортированнаяКоллекция = Новый Структура;
			
		Иначе
			ОтсортированнаяКоллекция = Новый Соответствие;
			
		КонецЕсли;
		
		Для Каждого СтрокаТаблицыКлючей Из ТаблицаКлючей Цикл
			Ключ = СтрокаТаблицыКлючей.Ключ;
			Значение = Коллекция[СтрокаТаблицыКлючей.Ключ]; 
			
			Если 
					СортироватьРекурсивно 
				И	Проверка_Тип(Значение, "Структура, Соответствие", Ложь) = ""
			Тогда
				Значение = Коллекция_Сортировать(Значение, СортироватьРекурсивно);	
			
			КонецЕсли;
			
			ОтсортированнаяКоллекция.Вставить(Ключ, Значение);
			
		КонецЦикла;
		СтрокаТаблицыКлючей = Неопределено; 
		
		Возврат ОтсортированнаяКоллекция;
	
	Иначе
		// Этот вид коллекции не сортируется
		Возврат Коллекция;

	КонецЕсли;
	
КонецФункции

Функция Коллекция_Свойство(Коллекция, Ключ, НайденноеЗначение = Неопределено) Экспорт
	
	Проверка_Тип(Коллекция, "Структура, Соответствие");
	
	Если ТипЗнч(Коллекция) = Тип("Структура") Тогда
		Возврат Коллекция.Свойство(Ключ, НайденноеЗначение);
		
	ИначеЕсли ТипЗнч(Коллекция) = Тип("Соответствие") Тогда
		
		Если Коллекция[Ключ] <> Неопределено Тогда
			НайденноеЗначение = Коллекция[Ключ];
	        Возврат Истина;
			
		КонецЕсли;
	    
	    КоличествоЭлементов = Коллекция.Количество();
		
		Коллекция.Удалить(Ключ);
	    
	    Если КоличествоЭлементов = Коллекция.Количество() Тогда
	        Возврат Ложь;
			
		КонецЕсли;
	    
	    Коллекция.Вставить(Ключ);
		НайденноеЗначение = Неопределено;
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

Функция КорневойТипКонфигурации_Получить(Знач пОбъект) Экспорт

    Если ТипЗнч(пОбъект) = Тип("ОбъектМетаданных") Тогда 
        МетаданныеТипа = пОбъект;
    Иначе
        Если ТипЗнч(пОбъект) = Тип("ОписаниеТипов") Тогда
            Если пОбъект.Типы().Количество() > 0 Тогда 
                пОбъект = пОбъект.Типы()[0];
            Иначе
                Возврат Неопределено;
            КонецЕсли;
        КонецЕсли;
        Если ТипЗнч(пОбъект) = Тип("Тип") Тогда
            МетаданныеТипа = Метаданные.НайтиПоТипу(пОбъект);
        Иначе
            МетаданныеТипа = Метаданные.НайтиПоТипу(ТипЗнч(пОбъект));
        КонецЕсли;
    КонецЕсли;
    Если МетаданныеТипа <> Неопределено Тогда 
        МассивФрагментов = СтрРазделить(МетаданныеТипа.ПолноеИмя(),".");
        Если МассивФрагментов.Количество() = 2 Тогда 
            Возврат МассивФрагментов[0];
        Иначе
            // Ссылка на субобъект
        КонецЕсли;
    КонецЕсли;
    Возврат Неопределено;
    
КонецФункции // ЛксПолучитьКорневойТипКонфигурации()

// Проверяет, является ли строка именем корневого типа объекта БД.
//
// Параметры:
//  пИмяКорневогоТипа - Строка, Неопределено - имя корневого типа.
//
// Возвращаемое значение:
//  Истина       – тип является корневым типом объекта БД;
//  Ложь         – иначе.
//
// 20140121 Заяш 
// Автор TormozIT
// Взято из подсистемы "ИнструментыРазработчика"
// ирГлобальный.ЛксЛиКорневойТипОбъектаБД
//
Функция КорневойТипКонфигурации_Проверить(КорневойТип) Экспорт

	Если Ложь
		ИЛИ КорневойТип = "БизнесПроцесс" 
		ИЛИ КорневойТип = "Задача" 
		ИЛИ КорневойТип = "Документ"
		ИЛИ КорневойТип = "ПланВидовРасчета" 
		ИЛИ КорневойТип = "ПланВидовХарактеристик" 
		ИЛИ КорневойТип = "ПланОбмена"
		ИЛИ КорневойТип = "ПланСчетов" 
		ИЛИ КорневойТип = "Справочник"
	Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;

КонецФункции // ЛксЛиКорневойТипОбъектаБД()

// Функция возвращает менеджер объекта по переданному значению
// Значение может быть типом или ссылкой
//
// Параметры:
//  пОбъект  - Тип, Ссылка - Обязательный параметр
//           Объект, для которого необходимо определить менеджер
//
// Возвращаемое значение:
//   Произвольный   
//		- менеджер объетка при успешном выполнении (ДокументМенеджер, СправочникМенеджер и т.д.)
//	    или Неопределено, если получение менеджера для переданного значения невозможно
//
// 20140121 Заяш 
//
Функция Менеджер_Получить(Знач пОбъект) Экспорт

	Если ТипЗнч(пОбъект) = Тип("Тип") Тогда
		ТипОбъекта = пОбъект;
	ИначеЕсли ТипЗнч(пОбъект) = Тип("ОбъектМетаданных") Тогда
		ТипОбъекта = Тип_ПолучитьПоМетаданным(пОбъект);
	Иначе
		ТипОбъекта = ТипЗнч(пОбъект);
	КонецЕсли;
	
	Если Не Тип_ЭтоСсылка(ТипОбъекта) Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	ИмяОбъекта = Метаданные.НайтиПоТипу(ТипОбъекта).Имя;
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипОбъекта) Тогда
		Возврат Справочники[ИмяОбъекта];
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипОбъекта) Тогда
		Возврат Документы[ИмяОбъекта];
		
	#Если Не МобильноеПриложениеСервер Тогда		
	ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипОбъекта) Тогда
		Возврат ПланыВидовХарактеристик[ИмяОбъекта];
	ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипОбъекта) Тогда
		Возврат ПланыСчетов[ИмяОбъекта];
	ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипОбъекта) Тогда
		Возврат ПланыВидовРасчета[ИмяОбъекта];
	ИначеЕсли БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипОбъекта) Тогда
		Возврат БизнесПроцессы[ИмяОбъекта];
	ИначеЕсли Задачи.ТипВсеСсылки().СодержитТип(ТипОбъекта) Тогда
		Возврат Задачи[ИмяОбъекта];
	#КонецЕсли	
	
	ИначеЕсли ПланыОбмена.ТипВсеСсылки().СодержитТип(ТипОбъекта) Тогда
		Возврат ПланыОбмена[ИмяОбъекта];
	ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипОбъекта) Тогда
		Возврат Перечисления[ИмяОбъекта];
	Иначе
		Возврат НеОпределено;
	КонецЕсли;

КонецФункции

Функция Менеджер_СоздатьОбъект(Менеджер) Экспорт
	
	КорневойТип = КорневойТипКонфигурации_Получить(Менеджер.ПустаяСсылка());
	Если КорневойТип = "БизнесПроцесс" Тогда 
		Результат = Менеджер.СоздатьБизнесПроцесс();
		
	ИначеЕсли КорневойТип = "Задача" Тогда
		Результат = Менеджер.СоздатьЗадачу();
		
	ИначеЕсли КорневойТип = "Документ" Тогда
		Результат = Менеджер.СоздатьДокумент();
		
	ИначеЕсли КорневойТип = "ПланВидовРасчета" Тогда 
		Результат = Менеджер.СоздатьВидРасчета();
		
	ИначеЕсли КорневойТип = "ПланВидовХарактеристик" Тогда 
		Результат = Менеджер.СоздатьЭлемент();
		
	ИначеЕсли КорневойТип = "ПланОбмена" Тогда
		Результат = Менеджер.СоздатьУзел();
		
	ИначеЕсли КорневойТип = "ПланСчетов" Тогда 
		Результат = Менеджер.СоздатьСчет();
		
	ИначеЕсли КорневойТип = "Справочник" Тогда
		Результат = Менеджер.СоздатьЭлемент();
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//Для Объект = Неопределено возвращает Ложь, работает только для русского и английского языков платформы
// Параметры:
//  КоличествоПараметров - нужно задать заведомо большее значение, чем может быть у метода 
//
// 20211030 Заяш 
// Автор TormozIT
// Взято из подсистемы "ИнструментыРазработчика"
// ирОбщий.МетодРеализованЛкс
//
Функция МетодРеализован(Объект, ИмяМетода) Экспорт
	
	Если Объект = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	Выражение = "Объект." + ИмяМетода + "(,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,)";
	Попытка
		Выполнить(Выражение);
	Исключение
		Инфо = ИнформацияОбОшибке();
		Описание = Инфо.Описание;
	КонецПопытки;
	Результат = Найти(НРег(Описание), "(" + НРег(ИмяМетода) + ")") = 0;
	Возврат Результат;
	
КонецФункции

// https://1c-bezproblem.ru/blog/v-pomoshch-1s-programmistu/1s-poluchit-ssylku-na-ob-ekt-po-navigatsionnoj-ssylke
Функция НавигационнаяСсылкаВСсылку(НавигационнаяСсылка) Экспорт
    
    ПерваяТочка = Найти(НавигационнаяСсылка, "e1cib/data/");
    ВтораяТочка = Найти(НавигационнаяСсылка, "?ref=");
    
    ПредставлениеТипа   = Сред(НавигационнаяСсылка, ПерваяТочка + 11, ВтораяТочка - ПерваяТочка - 11);
    ШаблонЗначения = ЗначениеВСтрокуВнутр(ПредопределенноеЗначение(ПредставлениеТипа + ".ПустаяСсылка"));
    ЗначениеСсылки = СтрЗаменить(ШаблонЗначения, "00000000000000000000000000000000", Сред(НавигационнаяСсылка, ВтораяТочка + 5));
    Ссылка = ЗначениеИзСтрокиВнутр(ЗначениеСсылки);
	
	Возврат Ссылка;
    
КонецФункции

Функция Объект_ПолучитьПоТипу(ТипСсылкиОбъекта, СсылкаОбъекта = Неопределено) Экспорт
	
	Проверка_Тип(ТипСсылкиОбъекта, Тип("Тип"));
	
	Результат = Неопределено;
	
	Если ТипЗнч(СсылкаОбъекта) = ТипСсылкиОбъекта И ЗначениеЗаполнено(СсылкаОбъекта) Тогда
		Результат = СсылкаОбъекта.ПолучитьОбъект();
		                                 
	Иначе
		МенеджерСсылкиОбъекта = Менеджер_Получить(ТипСсылкиОбъекта);
		Результат = Менеджер_СоздатьОбъект(МенеджерСсылкиОбъекта);
		
		// Созданному элементу сразу установить ссылку, чтобы можно было использовать ее далее 
		// Например, для заполнения служебных регистров
		СсылкаНового = МенеджерСсылкиОбъекта.ПолучитьСсылку();
		Результат.УстановитьСсылкуНового(СсылкаНового);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОбъектСсылкаДругое(пОбъект) Экспорт
	
	ВариантыРезультата = Новый ФиксированнаяСтруктура("Объект, Ссылка, Другое");
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(пОбъект));

	Если ТипЗнч(ОбъектМетаданных) <> Тип("ОбъектМетаданных") Тогда
		Возврат ВариантыРезультата.Другое;
		
	КонецЕсли;

	КорневойТипКонфигурации = Общ.КорневойТипКонфигурации_Получить(ОбъектМетаданных);

	Если Не Общ.КорневойТипКонфигурации_Проверить(КорневойТипКонфигурации) Тогда
		Возврат ВариантыРезультата.Другое;
		
	КонецЕсли;

	Если Общ.ЭтоСсылка(пОбъект) Тогда
		Возврат ВариантыРезультата.Ссылка;
		
	Иначе
		Возврат ВариантыРезультата.Объект;
		
	КонецЕсли;  
	
	Возврат ВариантыРезультата.Другое;	
	
КонецФункции

Функция ОбъектСсылочныйВКоллекцию(пОбъектСсылочный, ВыгрузитьВесьОбъект = Ложь, ВыгружатьНомераКоды = Истина) Экспорт
	
	ЭтоПеречисление = Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(пОбъектСсылочный));
	ЭтоСсылка = ЭтоСсылка(пОбъектСсылочный);
	ЭтоНовый = Ложь;
	ОбъектУдален = Ложь;
	
	Если ЭтоПеречисление Тогда
		Ссылка = пОбъектСсылочный;
		
	ИначеЕсли ЭтоСсылка Тогда
		Ссылка = пОбъектСсылочный;
		ОбъектУдален = Не СсылкаСуществует(Ссылка);

	ИначеЕсли Не ЭтоСсылка Тогда
		Ссылка = пОбъектСсылочный.Ссылка;
		ЭтоНовый = пОбъектСсылочный.ЭтоНовый;
		ОбъектУдален = Не ЭтоНовый И Не СсылкаСуществует(Ссылка);
		
	Иначе
		Возврат Неопределено;
		
	КонецЕсли;
		
	Ссылка_Тип = ТипЗнч(Ссылка); 
	
	Если Не Тип_ЭтоСсылка(Ссылка_Тип) Тогда
		Возврат Неопределено;
		
	КонецЕсли; 
	
	ОбразОбъекта = Новый Структура();
	ОбразОбъекта.Вставить("Тип", Тип_ПолучитьСтроковоеПредставление(Ссылка_Тип));
	
	// Для пустой ссылки вернуть только тип и признак пустой
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		ОбразОбъекта.Вставить("ПустаяСсылка", Истина);
		Возврат ОбразОбъекта;
		
	КонецЕсли;	
	
	Если ЭтоПеречисление Тогда
		ПолноеИмя = ПолучитьПолноеИмяПредопределенногоЗначения(Ссылка);		
		ОбразОбъекта.Вставить("Значение",СтрРазделить(ПолноеИмя, ".")[2]);
		
	ИначеЕсли ОбъектУдален Тогда
		// Для удаленного объекта реквизиты не нужны
		// Нужен только тип, уникальный идентификатор и признак удаления
		ОбразОбъекта.Вставить("ОбъектУдален", Истина);
		ОбразОбъекта.Вставить("УникальныйИдентификатор", Строка(Ссылка.УникальныйИдентификатор()));
		Возврат ОбразОбъекта;

	ИначеЕсли ВыгружатьНомераКоды Тогда			
		ОбразОбъекта.Вставить("УникальныйИдентификатор", Строка(Ссылка.УникальныйИдентификатор()));
		
	КонецЕсли;

	ЭтоСправочник = Справочники.ТипВсеСсылки().СодержитТип(Ссылка_Тип);
	ЭтоПВХ = ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Ссылка_Тип); 
	Если	ЭтоСправочник 
		Или ЭтоПВХ
		Или ПланыСчетов.ТипВсеСсылки().СодержитТип(Ссылка_Тип)
		Или ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Ссылка_Тип)
	Тогда
		ОбразОбъекта.Вставить("Наименование", пОбъектСсылочный.Наименование);
		
		Если ВыгружатьНомераКоды Тогда
			ОбразОбъекта.Вставить("Код", пОбъектСсылочный.Код);
			
		КонецЕсли;
		
	КонецЕсли;

	Если 
			ВыгружатьНомераКоды
		И	(
				Задачи.ТипВсеСсылки().СодержитТип(Ссылка_Тип)	
			Или Документы.ТипВсеСсылки().СодержитТип(Ссылка_Тип) 
			Или БизнесПроцессы.ТипВсеСсылки().СодержитТип(Ссылка_Тип)
				)
	Тогда			
		ОбразОбъекта.Вставить("Номер", пОбъектСсылочный.Номер);
		ОбразОбъекта.Вставить("Дата", пОбъектСсылочный.Дата);
		
	КонецЕсли; 
	
	Если Не ВыгрузитьВесьОбъект Тогда
		Возврат ОбразОбъекта;
		
	КонецЕсли; 
	
	// Далее полная выгрузка объекта 
	
	Если Не ЭтоПеречисление Тогда
		ОбразОбъекта.Вставить("ПометкаУдаления", пОбъектСсылочный.ПометкаУдаления);
			
		Если ЭтоНовый Тогда
			ОбразОбъекта.Вставить("ЭтоНовый", ЭтоНовый);
				
		КонецЕсли;
			
	КонецЕсли;
	
	Если ЭтоСправочник Или ЭтоПВХ Тогда 
		ОбразОбъекта.Вставить("ЭтоГруппа", пОбъектСсылочный.ЭтоГруппа);

	КонецЕсли;
	
	Если ЭтоСправочник Тогда 
			ОбразОбъекта.Вставить("Владелец", пОбъектСсылочный.Владелец);

	КонецЕсли;

	Если ВыгружатьНомераКоды И Документы.ТипВсеСсылки().СодержитТип(Ссылка_Тип) Тогда
		ОбразОбъекта.Вставить("Проведен", пОбъектСсылочный.Проведен);
		
	КонецЕсли;
	
	// Далее выгрузка реквизитов объекта при ВыгрузитьВесьОбъект = Истина
	МетаданныеОбъекта = Метаданные.НайтиПоТипу(Ссылка_Тип);

	Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
		ОбразОбъекта.Вставить(Реквизит.Имя, пОбъектСсылочный[Реквизит.Имя]);			
			
	КонецЦикла;

	Для Каждого МетаданныеТЧ Из МетаданныеОбъекта.ТабличныеЧасти Цикл
		ДанныеТЧ = Новый Массив;
		ТЧ = пОбъектСсылочный[МетаданныеТЧ.Имя];
		Для Каждого СтрокаТЧ Из ТЧ Цикл
			СтруктураСтрокиТЧ = Новый Структура;
			Для Каждого РеквизитТЧ Из МетаданныеТЧ.Реквизиты Цикл
				СтруктураСтрокиТЧ.Вставить(РеквизитТЧ.Имя, СтрокаТЧ[РеквизитТЧ.Имя]);

			КонецЦикла;
			РеквизитТЧ = Неопределено;
			
			ДанныеТЧ.Добавить(СтруктураСтрокиТЧ);
			
		КонецЦикла;
		СтрокаТЧ = Неопределено;
		
		ОбразОбъекта.Вставить(МетаданныеТЧ.Имя, ДанныеТЧ);
		
	КонецЦикла;
	МетаданныеТЧ = Неопределено;

	Возврат ОбразОбъекта;

КонецФункции // СсылкуВСтруктуруДляОбмена

Функция ОписаниеТиповСтроки_Получить(ДлинаСтроки) Экспорт

	Возврат Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(ДлинаСтроки, ДопустимаяДлина.Переменная));

КонецФункции // ОписаниеТиповСтроки_Получить()

Процедура ОшибкаВЖурналРегистрации(стрИмяСобытия, стрОписаниеОшибки) Экспорт

	ЗаписьЖурналаРегистрации(
		стрИмяСобытия,
		УровеньЖурналаРегистрации.Ошибка,
		,
		,
		стрОписаниеОшибки,
		РежимТранзакцииЗаписиЖурналаРегистрации.Независимая
		);

КонецПроцедуры

// Эмуляция системной функции ОписаниеОшибки,
// Которая доступна только внутри операторных скобок Исключение-КонецПопытки
Функция ПредставлениеОшибки(ИнфоОшибки) Экспорт 
	
	Проверка_Тип(ИнфоОшибки, Тип("ИнформацияОбОшибке"));
	
	ОбОШибке = 
		СтрШаблон(
			"%1
			|{%2(%3)}: %4",
			ИнфоОшибки.Описание, // %1
			ИнфоОшибки.ИмяМодуля, // %2
			ИнфоОшибки.НомерСтроки, // %3
			ИнфоОшибки.ИсходнаяСтрока // %4
			);

	Возврат ОбОшибке;	
	
КонецФункции

// Функция проверяет тип объекта
// Если тип не соответсвует вызывается исключение, или возвращается сообщение об ошибке.
Функция Проверка_Тип(ПроверяемоеЗначение, Знач ПроверяемыйТип, Вызвать_Исключение = Истина) Экспорт
	
	// ПРОВЕРКА ВХОДНЫХ ПАРАМЕТРОВ
	Если 
			Не ТипЗнч(ПроверяемыйТип) = Тип("Строка")
		И 	Не ТипЗнч(ПроверяемыйТип) = Тип("Тип") 
		И 	Не ТипЗнч(ПроверяемыйТип) = Тип("ОписаниеТипов")
	Тогда
		ВызватьИсключение 
			СтрШаблон(
				"Неверный тип параметра #2 '%1'. Параметр может иметь тип 'Строка', 'Тип' или 'ОписаниеТипов'",
				Тип_ПолучитьСтроковоеПредставление(ПроверяемыйТип)
				);
	КонецЕсли;

	// Обработка массива переменных
	Если 	ТипЗнч(ПроверяемоеЗначение) = Тип("Массив") 
		И	Не ПроверяемыйТип = "Массив"
		И	Не ПроверяемыйТип = Тип("Массив")
		И 	Не (ПроверяемыйТип = Тип("ОписаниеТипов") И ПроверяемыйТип.СодержитТип(Тип("Массив")))
	Тогда
		МассивОбъектов = ПроверяемоеЗначение;	
		
	Иначе
		МассивОбъектов = Новый Массив;
		МассивОбъектов.Добавить(ПроверяемоеЗначение);
		
	КонецЕсли;
	
	// ОСНОВНОЙ АЛГОРИТМ
	Ошибка_Описание = "";
	
	ДопустимТипНеопределено = Ложь;
	
	//+НА 20170320 Заяш 
	// Если Тип для проверки — строка. Тогда преобразовать его к описанию типов
	Если ТипЗнч(ПроверяемыйТип) = Тип("Строка") Тогда
		
		Попытка
			МассивИменТипов = СтрРазделить(ВРЕГ(ПроверяемыйТип), ",", Ложь);
			МассивТипов = Новый Массив;
			Для Каждого ИмяТипа Из МассивИменТипов Цикл
				ИмяТипа = СокрЛП(ИмяТипа);
				Если ИмяТипа = "НЕОПРЕДЕЛЕНО" Тогда
					ДопустимТипНеопределено = Истина;
				КонецЕсли;
				МассивТипов.Добавить(Тип(ИмяТипа));
				
			КонецЦикла;
			ИмяТипа = Неопределено;
			ПроверяемыйТип = Новый ОписаниеТипов(МассивТипов);
			
		Исключение
			ВызватьИсключение 
				СтрШаблон(
					"Неверное значение параметра #2. Тип '%1' не существует
					|%2",
					Строка(ПроверяемыйТип),
					ОписаниеОшибки()
					);
		КонецПопытки;
		
	КонецЕсли;
	
	Для Каждого ПроверяемыйОбъект Из МассивОбъектов Цикл
		
		Если ПроверяемыйОбъект = Неопределено И ДопустимТипНеопределено Тогда
			// ОК	
		
		ИначеЕсли 
				ПроверяемыйОбъект = Неопределено И Не ДопустимТипНеопределено
			// Описание типов не содержит тип переданного объекта
			Или (ТипЗнч(ПроверяемыйТип) = Тип("ОписаниеТипов") И Не ПроверяемыйТип.СодержитТип(ТипЗнч(ПроверяемыйОбъект)))
			// И объект не соответствует переданному типу
			Или (ТипЗнч(ПроверяемыйТип) = Тип("Тип") И Не ТипЗнч(ПроверяемыйОбъект) = ПроверяемыйТип)
		Тогда
	
			Если ТипЗнч(ПроверяемыйТип) = Тип("ОписаниеТипов") Тогда
				ОписаниеПроверяемогоТипа  = "";
				Для Каждого Тип Из ПроверяемыйТип.Типы() Цикл
					ОписаниеПроверяемогоТипа = ОписаниеПроверяемогоТипа + Тип_ПолучитьСтроковоеПредставление(Тип) +Символы.ПС;
				КонецЦикла;
				ОписаниеПроверяемогоТипа = СокрЛП(ОписаниеПроверяемогоТипа);
			ИначеЕсли ТипЗнч(ПроверяемыйТип) = Тип("Тип") Тогда
				ОписаниеПроверяемогоТипа = Тип_ПолучитьСтроковоеПредставление(ПроверяемыйТип);
			Иначе
				ОписаниеПроверяемогоТипа = "";
			КонецЕсли;
			Ошибка_Описание = 
				СтрШаблон(
					"Тип параметра ""%1"" не соответствует типу ""%2""%3. 
					|Параметр ""%1"" имеет тип ""%4""",
					ПроверяемыйОбъект, // %1 
					ОписаниеПроверяемогоТипа, //%2
					?(ДопустимТипНеопределено, " или ""Неопределено""", ""), // %3
					Тип_ПолучитьСтроковоеПредставление(ТипЗнч(ПроверяемыйОбъект)) // %4
					);

		КонецЕсли;

	КонецЦикла;
	ПроверяемыйОбъект = Неопределено;
		
	Если Не ЗначениеЗаполнено(Ошибка_Описание) Тогда 
		Возврат "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ошибка_Описание) И Вызвать_Исключение Тогда
		Ошибка_Описание = 	
			Ошибка_Описание+"
			|Обратитесь к разработчику.";
		ВызватьИсключение 
			Ошибка_Описание;
	КонецЕсли;
		
	Возврат Ошибка_Описание;

КонецФункции

// Процедура устанавливает отбор СКД. Используется для СКД и отборов динамических списков
//
// Параметры:
//		ОтборСКД
//			Обязательный, отбор СКД или группа элементов отбора компоновки данных
//			Отбор, в котором необходимо установить элемент
//		ЛевоеЗначение
//			Обязательный, Строка или ПолеКомпоновкиДанных
//			Поле, по которому будет происходить отбор
//		ПравоеЗначение
//			Обязательный, произвольный
//			Значение для отбора
//		ВидСравненияСКД
//			Необязательный, ВидСравненияКомпоновкиДанных
//			По умолчанию неопределено
//			Если значение не заполнено, будет взят вид сравнения "Равно".
//		Использование
//			Необязательный, Булево
//			По умолчанию Истина
//			Признак, использовать параметр или нет
// 		ЭлементОтбораДанных
//			Необязательный, не заполнять
//			Нужен для рекурсивной работы процедуры
//
// 20120905103206 Заяш
// 
Процедура СКД_Отбор_Установить(
		ОтборСКД, 
		знач ЛевоеЗначение, 
		знач ПравоеЗначение, 
		ВидСравненияСКД = Неопределено, 
		Использование = Истина, 
		ЭлементОтбораДанных = Неопределено
		) Экспорт
	
	Проверка_Тип(Использование, Тип("Булево"));
	
	Если ТипЗнч(ЛевоеЗначение) = Тип("Строка") Тогда
		ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ЛевоеЗначение);
	КонецЕсли;
	   
	Если ВидСравненияСКД = Неопределено Тогда
		ВидСравненияСКД = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	
	ЭлементыОтбора = ОтборСКД.Элементы;
	
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			// Вызвать рекурсивно эту процедуру
			СКД_Отбор_Установить(ЭлементОтбора, ЛевоеЗначение, ПравоеЗначение, ВидСравненияСКД, Использование, ЭлементОтбораДанных);
			Продолжить;
		КонецЕсли;
		
		Если ЭлементОтбора.ЛевоеЗначение = ЛевоеЗначение Тогда
			Если ЭлементОтбораДанных = Неопределено Тогда
				ЭлементОтбораДанных = ЭлементОтбора;
				ЭлементОтбораДанных.ВидСравнения = ВидСравненияСКД;
				ЭлементОтбораДанных.ПравоеЗначение = ПравоеЗначение;
				ЭлементОтбораДанных.Использование = Использование;
			Иначе
				ЭлементОтбора.Использование = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Если элемент отбора не найден, добавить новый в корень и установить ему значения
	Если ЭлементОтбораДанных = Неопределено И ТипЗнч(ОтборСКД) = Тип("ОтборКомпоновкиДанных") Тогда
		ЭлементОтбораДанных = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораДанных.ЛевоеЗначение = ЛевоеЗначение;
		ЭлементОтбораДанных.ВидСравнения = ВидСравненияСКД;
		ЭлементОтбораДанных.ПравоеЗначение = ПравоеЗначение;
		ЭлементОтбораДанных.Использование = Использование;
	КонецЕсли;
	
КонецПроцедуры

Процедура СправочникОбъект_УстановитьУИДкакКод(СправочникОбъект) Экспорт
	
	//+Гуртам 20210819 Заяш https://jira.gurtam.team/browse/AUT-1761 
	ИДСтрокой = "";
	
	Если СправочникОбъект.ЭтоНовый() И Не ЗначениеЗаполнено(СправочникОбъект.Ссылка) Тогда
		СсылкаНового = Неопределено;
		
		Если СправочникОбъект.ДополнительныеСвойства.Свойство("СсылкаНового") Тогда
			СсылкаНового = СправочникОбъект.ДополнительныеСвойства.СсылкаНового;
			
		КонецЕсли;
		
		Если
					ТипЗнч(СсылкаНового) <> ТипЗнч(СправочникОбъект.Ссылка)
			 ИЛИ	Не ЗначениеЗаполнено(СсылкаНового)
 		Тогда
			СправочникМенеджер = Менеджер_Получить(СправочникОбъект.Ссылка);
			СсылкаНового = СправочникМенеджер.ПолучитьСсылку();
			
		КонецЕсли;

		СправочникОбъект.УстановитьСсылкуНового(СсылкаНового);
		
		ИДСтрокой = Строка(СсылкаНового.УникальныйИдентификатор());
		
	КонецЕсли;
	
	Если СправочникОбъект.ЭтоНовый() Тогда
		СправочникОбъект.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		
	КонецЕсли;

	// Установить код равный уникальному идентификатору
	Если ЗначениеЗаполнено(СправочникОбъект.Ссылка) Тогда
		ИДСтрокой = Строка(СправочникОбъект.Ссылка.УникальныйИдентификатор());
		
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ИДСтрокой) И СправочникОбъект.Код <> ИДСтрокой Тогда
		СправочникОбъект.Код = ИДСтрокой;
		
	КонецЕсли;
	
КонецПроцедуры

Функция Ссылка_ЕстьРеквизит(Ссылка, знач ИмяРеквизита = "") Экспорт
	
	ИмяРеквизита = СокрЛП(ИмяРеквизита);		
	
	Если Не ЭтоСсылка(Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Ссылка_Метаданные = Ссылка.Метаданные();
	
	Если Ссылка_Метаданные.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого СтандартныйРеквизит Из Ссылка_Метаданные.СтандартныеРеквизиты Цикл
		Если СтандартныйРеквизит.Имя = ИмяРеквизита Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	СтандартныйРеквизит = Неопределено;
	
	Возврат Ложь;

КонецФункции

Функция Ссылка_ИмяТаблицы(СсылкаНаОбъект) Экспорт
	
	Возврат СтрЗаменить(Тип_ПолучитьСтроковоеПредставление(СсылкаНаОбъект),"Ссылка.",".");
	
КонецФункции

Функция Ссылка_Реквизит_ПолучитьИзБД(Ссылка, ИмяРеквизита = "") Экспорт
	
	Если Не ЭтоСсылка(Ссылка) Тогда
		ВызватьИсключение "Параметр #1 должен иметь ссылочный тип";
	КонецЕсли;
	
	// Если ссылка не записана, вернуть неопределено
	Если Не ЗначениеЗаполнено(Ссылка.Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Если имя реквизита не заполнено, вернем неопределено
	Если ПустаяСтрока(ИмяРеквизита) Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	// Если у документа нет реквизита, вернем неопределено
	Если Не Ссылка_ЕстьРеквизит(Ссылка, ИмяРеквизита) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		СтрШаблон(
		"ВЫБРАТЬ 
		|%1 КАК ЗначениеРеквизита 
		|ИЗ %2.%3
		|ГДЕ Ссылка = &Ссылка",
		ИмяРеквизита, // %1
		КорневойТипКонфигурации_Получить(Ссылка), // %2
		Ссылка.Метаданные().Имя // %3
		);
	Запрос.УстановитьПараметр("Ссылка", Ссылка.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ЗначениеРеквизита;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

Функция СсылкаСуществует(СсылкаНаОбъект) Экспорт
    
    Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаОбъект);
	Запрос.Текст = 
		СтрШаблон(
			"Выбрать Таб.Ссылка ИЗ %1 КАК Таб ГДЕ Таб.Ссылка = &СсылкаНаОбъект",
			Ссылка_ИмяТаблицы(СсылкаНаОбъект),
			);
			
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Не Запрос.Выполнить().Пустой();
	Запрос = Неопределено;

	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
    
КонецФункции

Функция Строка_УдалитьНедопустимыеСимволы(стр, ДопустимыеСимволы) Экспорт

	Возврат СтрСоединить(СтрРазделить(стр, СтрСоединить(СтрРазделить(стр, ДопустимыеСимволы))))

КонецФункции

// Функция для преобразования табличного документа в таблицу значений.
// Предполагается, что в первой строке табличного документа содержаться имена колонок.
//
// Параметры
//  ТабличныйДокумент
//		Обязательный, ТабличныйДокумент
//		Табличный документ, который нужно преобразовать в таблицу значений
//
// Возвращаемое значение:
//   ТаблицаЗначений
//
// 20121010 Заяш
//
Функция ТабличныйДокумент_ВТаблицуЗначений(ТабличныйДокумент) Экспорт
	
	ТЗ=Новый ТаблицаЗначений();
	
	//Считываем колонки
	Для Стр=1 По ТабличныйДокумент.ВысотаТаблицы Цикл
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
		Если Стр>1 Тогда
			ТекСтр=ТЗ.Добавить();
		КонецЕсли;
		ПустаяСтрока=истина;
		Для Кол=1 По ТабличныйДокумент.ШиринаТаблицы Цикл
			Яч=ТабличныйДокумент.Область(Стр, Кол);
			Если Яч.СодержитЗначение Тогда
				Зн=Яч.Значение;
			Иначе
				Зн=Яч.Текст;
			КонецЕсли;
			Если ТипЗнч(Зн)=Тип("Строка") И ПустаяСтрока(Зн) Тогда
				Зн=Неопределено;
			КонецЕсли;
			
			//Добавляем колонку
			Если Стр=1 Тогда
				
				// В имени колонки убрать пробелы
				Зн = СокрЛП(Зн);
				Зн = СтрЗаменить(Зн, " ", "_");
				Зн = СтрЗаменить(Зн, Символы.ПС, "");
				Зн = СтрЗаменить(Зн, "-", "");
				
				// Если в таблице уже есть колонка стаким именем, добавить номер
				Если ТЗ.Колонки.Найти(Зн) <> Неопределено Тогда
					Счетчик = 0;
					
					Пока Истина Цикл
						Счетчик = Счетчик + 1;
						
						ЗнСоСчетчиком = Зн + "_" + Счетчик;
						
						НайденнаяКолонка = ТЗ.Колонки.Найти(ЗнСоСчетчиком);
						
						Если НайденнаяКолонка = Неопределено Тогда
							Зн = ЗнСоСчетчиком;
							Прервать;
							
						Иначе
							Продолжить;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				ТЗ.Колонки.Добавить(Зн, ОписаниеТиповСтроки_Получить(255));
				
			Иначе
				ТекСтр[Кол-1]=Зн;
				
			КонецЕсли;
			
		КонецЦикла;
		Кол = Неопределено;
		
	КонецЦикла;
	Стр = Неопределено;
	
	Возврат ТЗ;
	
КонецФункции // ТабличныйДокумент_ВТаблицуЗначений()

// Получает ссылочный тип по метаданным.
//
// Параметры:
//  пМетаданные  – ОбъектМетаданных.
//
// Возвращаемое значение:
//               – Тип - ссылочный;
//  Неопределено – тип нельзя получить.
//
// 20140121 Заяш 
// Автор TormozIT
// Взять из подситстемы ИнструментыРазработчика
// ирГлобальный.ЛксПолучитьСсылочныйТипПоМетаданным(пМетаданные)
//
Функция Тип_ПолучитьПоМетаданным(пМетаданные) Экспорт

	Результат = Неопределено;
	КорневойТип = КорневойТипКонфигурации_Получить(пМетаданные);
	Если КорневойТипКонфигурации_Проверить(КорневойТип) Тогда 
		Результат = Тип(КорневойТип + "Ссылка." + пМетаданные.Имя);
	КонецЕсли;
	Возврат Результат;

КонецФункции // Тип_ПолучитьПоМетаданным()

// Предназначена для получения пустого значения заданного типа:
//	примитивного, или ссылочного. Используется
//
// Параметры:
//	ЗаданныйТип   - тип, пустое значение которого нужно получить
//
Функция Тип_ПолучитьПустоеЗначение(ЗаданныйТип) Экспорт
	
	Если ЗаданныйТип = Тип("Число") Тогда
		Возврат 0;
	ИначеЕсли ЗаданныйТип = Тип("Строка") Тогда
		Возврат "";
	ИначеЕсли ЗаданныйТип = Тип("Дата") Тогда
		Возврат '00010101000000';
	ИначеЕсли ЗаданныйТип = Тип("Булево") Тогда
		Возврат Ложь;
	ИначеЕсли ЗаданныйТип = Тип("Неопределено") Тогда
		Возврат Неопределено;
	ИначеЕсли ТипЗнч(ЗаданныйТип) = Тип("ОписаниеТипов") Тогда
		Если ЗаданныйТип.Типы().Количество() = 0 Тогда
			Возврат Неопределено;
		Иначе
			Возврат Новый(ЗаданныйТип.Типы()[0]);
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЗаданныйТип) = Тип("Тип") Тогда
		Возврат Новый(ЗаданныйТип);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // ПустоеЗначениеТипа();

// Возвращает строковое представление типа. 
// Для ссылочных типов возвращает в формате "СправочникСсылка.ИмяОбъекта" или "ДокументСсылка.ИмяОбъекта"
// Для остальных типов приводит тип к строке, например "Число".
//
// 20130331 Заяш. Функция взята из модуля ОбщегоНазначения стандартных конфигураций
Функция Тип_ПолучитьСтроковоеПредставление(Знач Тип) Экспорт
	
	Представление = "";
	
	Если Не ТипЗнч(Тип) = Тип("Тип") Тогда
		Тип = ТипЗнч(Тип);
	КонецЕсли;	
	
	Если Тип_ЭтоСсылка(Тип) Тогда
		
		ПолноеИмя = Метаданные.НайтиПоТипу(Тип).ПолноеИмя();
		ИмяОбъекта = СтрРазделить(ПолноеИмя, ".")[1];
		
		Если Справочники.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "СправочникСсылка";
			
		ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ДокументСсылка";
			
		ИначеЕсли БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "БизнесПроцессСсылка";
			
		ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ПланВидовХарактеристикСсылка";
			
		ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ПланСчетовСсылка";
			
		ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ПланВидовРасчетаСсылка";
			
		ИначеЕсли Задачи.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ЗадачаСсылка";
			
		ИначеЕсли ПланыОбмена.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ПланОбменаСсылка";
			
		ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ПеречислениеСсылка";
			
			
		КонецЕсли;
		
		Результат = ?(Представление = "", Представление, Представление + "." + ИмяОбъекта);
		
	Иначе
		
		Результат = Строка(Тип);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверка того, что тип имеет ссылочный тип данных
//
// Параметры:
//	Тип — Тип или объект метаданных
//		необходимо проверить, педставляет ли этот тип
//
//	Возвращает:
//		Булево — признак того, что это ссылка
//
Функция Тип_ЭтоСсылка(Знач Тип, ПроверятьМетаданные = Истина) Экспорт
 
	Если Тип = Тип("Неопределено") Тогда
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(Тип) = Тип("Тип") Тогда
		Возврат 
			Справочники.ТипВсеСсылки().СодержитТип(Тип)
			ИЛИ Документы.ТипВсеСсылки().СодержитТип(Тип)
			ИЛИ Перечисления.ТипВсеСсылки().СодержитТип(Тип)
			ИЛИ ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип)
			ИЛИ ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип)
			ИЛИ ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип)
			ИЛИ БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип)
			ИЛИ БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().СодержитТип(Тип)
			ИЛИ Задачи.ТипВсеСсылки().СодержитТип(Тип)
			ИЛИ ПланыОбмена.ТипВсеСсылки().СодержитТип(Тип);
			
	ИначеЕсли ТипЗнч(Тип) = Тип("ОбъектМетаданных") И ПроверятьМетаданные Тогда
		Возврат
			Метаданные.Справочники.Содержит(Тип)
			ИЛИ Метаданные.Документы.Содержит(Тип)
			ИЛИ Метаданные.Перечисления.Содержит(Тип)
			ИЛИ Метаданные.ПланыВидовХарактеристик.Содержит(Тип)
			ИЛИ Метаданные.ПланыСчетов.Содержит(Тип)
			ИЛИ Метаданные.ПланыВидовРасчета.Содержит(Тип)
			ИЛИ Метаданные.БизнесПроцессы.Содержит(Тип)
			ИЛИ Метаданные.Задачи.Содержит(Тип)
			ИЛИ Метаданные.ПланыОбмена.Содержит(Тип);
			
	Иначе
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

Функция Число_ВСтроку_ДополнитьЛидирующимиНулями(пЧисло, КоличествоСимволов) Экспорт
	
	Проверка_Тип(пЧисло, "Число"); 
	Проверка_Тип(КоличествоСимволов, "Число");
	
	ФорматнаяСтрока = 
		СтрШаблон(
			"ЧЦ=%1; ЧВН=; ЧГ=0",
			Формат(КоличествоСимволов, "ЧДЦ=0; ЧГ=0")
			);
	
	Возврат Формат(пЧисло, ФорматнаяСтрока);
	
КонецФункции

Функция ЭтоСсылка(пЗначение, ПроверятьМетаданные = Истина) Экспорт

	Возврат Тип_ЭтоСсылка(ТипЗнч(пЗначение), ПроверятьМетаданные);

КонецФункции

Функция ЭтоЗаполненнаяСсылка(ПроверяемоеЗначение, ПроверяемыйТип = Неопределено) Экспорт
	
	// Если передан параметр ПроверяемыйТип, проверить, соответствует ли ему ПроверяемоеЗначение
	Если ТипЗнч(ПроверяемыйТип) = Тип("Тип") Тогда 
		ПроверяемоеЗначениеСоответствуетТипу = Проверка_Тип(ПроверяемоеЗначение, ПроверяемыйТип, Ложь) = "";
		
		Если Не ПроверяемоеЗначениеСоответствуетТипу Тогда
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЭтоСсылка(ПроверяемоеЗначение, Ложь) И ЗначениеЗаполнено(ПроверяемоеЗначение);
	
КонецФункции

