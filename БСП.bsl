// Получает файл обработки из временного хранилища, пытается создать объект
//  обработки (внешнего отчета) и получает информацию из объекта внешней обработки (отчета)
//
// Параметры:
//  ДанныеОбработки	 - Строка, ДвоичныеДанные - Обязательный параметр, двоичные данные файла внешней обработки 
//												или адрес этих двоичных данных во временном хранилище
//  ИмяФайла		 - Строка - Обязательный, имя файла внешней обработки
//  РасширениеФайла	 - Строка - Обязательный, расширение файла, допустимо EPF или ERF
// 
// Возвращаемое значение:
//  Булево - Истина при успехе. 
//	При неудаче будет вызвано исключение
//
Функция ДопОбработка_Зарегистрировать(ДанныеОбработки, ИмяФайла, Знач РасширениеФайла, ДопОбработка_Ссылка = Неопределено) Экспорт
	
	Попытка
		ДвоичныеДанныеОбработки = Неопределено;
		Если ТипЗнч(ДанныеОбработки) = Тип("Строка") И ЭтоАдресВременногоХранилища(ДанныеОбработки) Тогда
			ДвоичныеДанныеОбработки = ПолучитьИзВременногоХранилища(ДанныеОбработки);
			
		ИначеЕсли ТипЗнч(ДанныеОбработки) = Тип("ДвоичныеДанные") Тогда
			ДвоичныеДанныеОбработки = ДанныеОбработки;
			
		КонецЕсли;
			
		Если ТипЗнч(ДвоичныеДанныеОбработки) <> Тип("ДвоичныеДанные") Тогда
			ВызватьИсключение 
				СтрШаблон(
					"Неверный тип параметра #1 ДанныеОбработки: '%1'
					|Необходим адрес временного хранилища или двоичные данные", 
					Тип(ДанныеОбработки) // %1
					);
			
		КонецЕсли;
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(РасширениеФайла);
		ДвоичныеДанныеОбработки.Записать(ИмяВременногоФайла);
		
		РасширениеФайла = СокрЛП(РасширениеФайла);
		РасширениеФайла = СтрЗаменить(РасширениеФайла, ".", "");
		РасширениеФайла = ВРег(РасширениеФайла);
		
		Если РасширениеФайла = "EPF" Тогда
			ВнешняяОбработка = ВнешниеОбработки.Создать(ИмяВременногоФайла, Истина);
			
		ИначеЕсли РасширениеФайла = "ERF" Тогда
			ВнешняяОбработка = ВнешниеОтчеты.Создать(ИмяВременногоФайла, Истина);
			
		Иначе
			ВызватьИсключение 
				СтрШаблон(
					"Неизвестный тип внешнией обработки *.%1, должно быть *.EPF или *.ERF",
					РасширениеФайла
					);
				
		КонецЕсли;
		
		РегистрационныеДанные = ВнешняяОбработка.СведенияОВнешнейОбработке();
		
		Если 
				ТипЗнч(ДопОбработка_Ссылка) = Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки") 
			И	ЗначениеЗаполнено(ДопОбработка_Ссылка) 
			И	СсылкаСуществует(ДопОбработка_Ссылка) 
		Тогда
			ДопОбработка_Объект = ДопОбработка_Ссылка.ПолучитьОбъект();
			
		Иначе
			ДопОбработка_Объект = Справочники.ДополнительныеОтчетыИОбработки.СоздатьЭлемент();
			ДопОбработка_Объект.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок[РегистрационныеДанные.Вид];
			
		КонецЕсли;

		// Инициализация сведений об обработке
		ДопОбработка_Объект.Наименование		= РегистрационныеДанные.Наименование;
		ДопОбработка_Объект.Версия			= РегистрационныеДанные.Версия;
		ДопОбработка_Объект.БезопасныйРежим	= РегистрационныеДанные.БезопасныйРежим;
		ДопОбработка_Объект.Информация		= РегистрационныеДанные.Информация;
		
		// Устанавливаем имя файла обработки
		ДопОбработка_Объект.ИмяФайла = ИмяФайла;
		
		// Если новая обработка или не заполнено назначение - устанавливаем назначение из обработки
		Если (ДопОбработка_Объект.Ссылка = Справочники.ДополнительныеОтчетыИОбработки.ПустаяСсылка()
			 ИЛИ ДопОбработка_Объект.Назначение.Количество() = 0)
			И (ДопОбработка_Объект.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ЗаполнениеОбъекта
				ИЛИ ДопОбработка_Объект.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет
				ИЛИ ДопОбработка_Объект.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма
				ИЛИ ДопОбработка_Объект.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.СозданиеСвязанныхОбъектов)
		ТОГДА
			 
			ДопОбработка_Объект.Ответственный = ОбщегоНазначения.ТекущийПользователь();
			ДопОбработка_Объект.ИспользоватьДляФормыОбъекта = Истина;
			ДопОбработка_Объект.ИспользоватьДляФормыСписка = Истина;
			
			ПолноеНазначениеЗначение = ДополнительныеОтчетыИОбработки.ПолучитьПолноеНазначениеПоВидуДополнительнойВнешнейОбработки(ДопОбработка_Объект.Вид);
			
			Если РегистрационныеДанные.Свойство("Назначение") Тогда
				
				Для Каждого ЭлементЗаданноеНазначение Из РегистрационныеДанные.Назначение Цикл
					
					РазделеннаяСтрока = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ЭлементЗаданноеНазначение, ".");
					
					Если РазделеннаяСтрока[1] = "*" Тогда
						
						НайденныеНазначения = ПолноеНазначениеЗначение.НайтиСтроки(Новый Структура("Класс", РазделеннаяСтрока[0]));
						
						Для Каждого ЭлементНайденноеНазначение Из НайденныеНазначения Цикл
							НоваяСтрока = ДопОбработка_Объект.Назначение.Добавить();
							НоваяСтрока.ПолноеИмяОбъектаМетаданных = ЭлементНайденноеНазначение.ПолноеИмяОбъектаМетаданных;
						КонецЦикла;
						
					Иначе
						
						Если ПолноеНазначениеЗначение.НайтиСтроки(Новый Структура("ПолноеИмяОбъектаМетаданных", ЭлементЗаданноеНазначение)).Количество() > 0 Тогда
							НоваяСтрока = ДопОбработка_Объект.Назначение.Добавить();
							НоваяСтрока.ПолноеИмяОбъектаМетаданных = ЭлементЗаданноеНазначение;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
			ДопОбработка_Объект.Назначение.Свернуть("ПолноеИмяОбъектаМетаданных", "");

		КонецЕсли;
		
		КомандыСохраненные = ДопОбработка_Объект.Команды.Выгрузить();
		
		ДопОбработка_Объект.Команды.Очистить();
		
		// Инициализация команд
		Для Каждого ЭлементОписаниеКоманды Из РегистрационныеДанные.Команды Цикл
			
			НоваяСтрока = ДопОбработка_Объект.Команды.Добавить();
			НоваяСтрока.Идентификатор	= ЭлементОписаниеКоманды.Идентификатор;
			НоваяСтрока.Представление	= ЭлементОписаниеКоманды.Представление;
			НоваяСтрока.Модификатор		= ЭлементОписаниеКоманды.Модификатор;
			НоваяСтрока.ПоказыватьОповещение = ЭлементОписаниеКоманды.ПоказыватьОповещение;
			
			Если ЭлементОписаниеКоманды.Использование = "ОткрытиеФормы" Тогда
				НоваяСтрока.ВариантЗапуска = Перечисления.СпособыВызоваДополнительныхОбработок.ОткрытиеФормы;
			ИначеЕсли ЭлементОписаниеКоманды.Использование = "ВызовКлиентскогоМетода" Тогда
				НоваяСтрока.ВариантЗапуска = Перечисления.СпособыВызоваДополнительныхОбработок.ВызовКлиентскогоМетода;
			ИначеЕсли ЭлементОписаниеКоманды.Использование = "ВызовСерверногоМетода" Тогда
				НоваяСтрока.ВариантЗапуска = Перечисления.СпособыВызоваДополнительныхОбработок.ВызовСерверногоМетода;
			Иначе
				ТекстСообщения = НСтр("ru = 'Для команды %1 не определен способ запуска.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ЭлементОписаниеКоманды.Представление);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
			
		КонецЦикла;

		ДопОбработка_Объект.Записать();
		
	Исключение
		
		ЗаписьЖурналаРегистрации(
			"ДопОбработка_Зарегистрировать",
			УровеньЖурналаРегистрации.Ошибка,
			, // Объект метаданных
			ДопОбработка_Ссылка, // Данные
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			РежимТранзакцииЗаписиЖурналаРегистрации.Независимая
			);
		
		Возврат ИнформацияОбОшибке();
		
	КонецПопытки;
	
	Возврат ДопОбработка_Ссылка;
	
КонецФункции

